plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.11-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.6.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation("org.springframework.kafka:spring-kafka:3.3.3")
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0")
	implementation("org.modelmapper:modelmapper:3.2.2")
}

tasks.named('compileJava') {
	dependsOn(tasks.openApiGenerate)
}
sourceSets.main.java.srcDir "${buildDir}/generated/src/main/java"
openApiGenerate {
	generatorName.set("spring")
	inputSpec.set("$rootDir/src/main/resources/static/api.yaml")
	outputDir.set("$buildDir/generated")
	apiPackage.set("org.openapi.example.api")
	invokerPackage.set("org.openapi.example.invoker")
	modelPackage.set("org.openapi.example.model")
	configOptions.set(
			openApiNullable: 'false',
			useSpringBoot3: 'true',
			interfaceOnly: 'true',
			dateLibrary: 'custom',
			bigDecimalAsString: 'true'
	)
	typeMappings.set(
			typeMappings: 'OffsetDataTime=Date'
	)
	importMappings.set(
			importMappings: 'import java.time.OffsetDateTime=import java.util.Date'
	)
	compileJava.dependsOn tasks.openApiGenerate
}

